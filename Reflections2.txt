What happens when you initialize a repository? Why do you need to do it?
	.git폴더가 생성됨 이폴더의 git repository로 이제 부터 git이 관리할 commit을 베이스로	한 파일들이 관리될거임
	
	이제부터 Working Directory/staging area/Repository를 구분할거임
	
	git init을 해야 원하는 폴더의 파일들을 git으로 관리 할 수 있음(초기화는 꼭해야됨)


How is the staging area different from the working directory and the repository? What value do you think it offers?
	실제로 존재하는 working-directory 그리고 git의해서 관리되는 repository의 중간단계
	현재 변경된 파일을 repository에 등록 하기전의 단계를 담당함

	staging Area는 지나치게 빈번하게 commit을 하거나 의미없는 commit을 할 경우를 줄여
	줄 수 있을것 같다. 일단 중간 단계에서 commit될 파일을 등록하거나 지울 수 있어서
	commit이 너무 많아져서 사용자가 구분하기 힘들어지는 경우가 생기는것도 막을 수 있을것 	같다.


How can you use the staging area to make sure you have one commit per logical change?
	가장 최근의 commit과 현재 Staging Area의 상태를 비교하려면 git diff --staged 명령어
	를 사용하면된다. 만약 결과가 1개 이상의 파일이 staging Area에 들어있다고 표시하면
	commit에서 제외할 파일은 git reset [fileName]으로 Staging Area에서 제외할 수 있다.
	

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	App에서 완전히 새로운 카테고리 또는 기능을 추가할때 테스트는 하고 싶지만 해당기능을 
	업데이트 하기에는 아직 검증이 되지 않았거나 불안정할때 branch를 생성하고 기능을 
	안정화 시킨 후에 merging으로 합치는게 가능하다.

	또한 언제든지 master branch 또는 새로 생성된 branch로 시점 이동이 가능하기 때문에
	헷갈리지 않는다!

How do the diagrams help you visualize the branch structure?

	브랜치 다이어그램을 보면 브랜치가 어떻게 생성됐는지 부모 브랜치/부모 커밋은 무엇
	인지 파악하기 용이하다. 특히 git log --graph --oneline [branch_name] [branch_name]
	을 사용하면 좋다 하지만 GUI만은 못한것 같다. 헷갈림

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	merging후에는 branch에 서로 나누어져 있던 기능들이 하나로 묶여서 함께 사용될 수 있다		
	다이어 그램을 이용하면 각 branch의 commit이 어떻게 이루어졌는지 commit의 부모 commit	
	은 어느것인지 시간순으로 확인하기 용이하다.


What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

	자동 merge는 간편하지만 같은 이름의 같은기능 같은 이름의 다른 기능등 서로다른 
	사용자가 만든 기능에 대해서 어떤것이 최적인지 선택해야 할 경우 이를 판단하지
	못한다. 아마 A.I가 발전하면 이것도 해결 될지도 모르지만 여튼 현재는 사용자가 판단
	해서 최적의 기능을 선택하여 conflict 제거해야한다.